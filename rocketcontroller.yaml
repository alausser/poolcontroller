substitutions:
  PumpStartTimeHour: "9" #Startzeit der Pumpe Stunden
  PumpStartTimeMinute: "00" #Startzeit der Pumpe Minuten
  PumpEndTimeHour: "20" #Endzeit der Pumpe Stunden
  PumpEndTimeMinute: "00" #Startzeit der Pumpe Minuten
  checkIntervalORP: "30 min" #Angabe nach der Zahl ist wichtig!!
  checkIntervalPH: "30 min" #Angabe nach der Zahl ist wichtig!!

globals:
  - id: ph_cycles
    type: float
    initial_value: '1'
  - id: max_ph_ml_per_day
    type: float
    initial_value: '300' # ml die der Dispenser täglich maximal injezieren darf, kann in HA geändert werden
    restore_value: true
  - id: max_ph_ml_per_cycle
    type: float
    initial_value: '100' # ml die der Dispenser pro Zyklus maximal injezieren darf, kann in HA geändert werden
    restore_value: true
  - id: ph_locked
    type: bool
    initial_value: "false"
  - id: ph_today_ml
    type: float
    initial_value: '0'
    restore_value: false
  - id: ph_ml_per_second
    type: float
    initial_value: '0.8' # ml die der Dispenser pro Sekunde injeziert, kann in HA geändert werden
    restore_value: true
  - id: chlorinator_today_run_time
    type: float
    initial_value: '0'
    restore_value: false
  - id: chlorinator_run_time_max
    type: float
    initial_value: '360' # Minuten die der Chlorinator pro Tag maximal erreichen darf kann in HA geändert werden
    restore_value: true
  - id: PumpPreRunTime
    type: float
    initial_value: '30' # Vorlaufzeit der Poolpumpe in Minuten angeben kann in HA geändert werden
    restore_value: true
  - id: poolpump_ok
    type: bool
    initial_value: "false" # Ist Poolpumpenvorlaufzeit erreicht ?
  - id: chlor_needed
    type: bool
    initial_value: "false" # Chlor nötig?
  - id: ph_needed
    type: bool
    initial_value: "false" # PH Minus nötig?
  - id: ph_max_reached
    type: bool
    initial_value: "false" # PH Minus maximal Menge erreicht?
  - id: chlorinator_max_reached
    type: bool
    initial_value: "false" # Chlorinator max Laufzeit erreicht?
  - id: phdispenser_today_run_time
    type: float
    initial_value: '0'
    restore_value: true
  - id: can_ph_rest
    type: float
    initial_value: '5000'
    restore_value: true
  
  
  
esphome:
  name: poolcontroller
  friendly_name: Poolcontroller

  #on_boot:
  #priority: -100

   #   time.has_time:
    # then:
     # - logger.log: Time has been set and is valid!
      #- rtttl.play: 'two_short:d=4,o=5,b=100:16e6,16e6'
      
  # buzzer on on startup
   # priority: -100
   # then:
   #   - rtttl.play: 'two_short:d=4,o=5,b=100:16e6,16e6'
    #'The Simpsons:d=4,o=5,b=160:c.6,e6,f#6,8a6,g.6,e6,c6,8a,8f#,8f#,8f#,2g,8p,8p,8f#,8f#,8f#,8g,a#.,8c6,8c6,8c6,c6'
    #'Indiana:d=4,o=5,b=250:e,8p,8f,8g,8p,1c6,8p.,d,8p,8e,1f,p.,g,8p,8a,8b,8p,1f6,p,a,8p,8b,2c6,2d6,2e6,e,8p,8f,8g,8p,1c6,p,d6,8p,8e6,1f.6,g,8p,8g,e.6,8p,d6,8p,8g,e.6,8p,d6,8p,8g,f.6,8p,e6,8p,8d6,2c6'
    #'TakeOnMe:d=4,o=4,b=160:8f#5,8f#5,8f#5,8d5,8p,8b,8p,8e5,8p,8e5,8p,8e5,8g#5,8g#5,8a5,8b5,8a5,8a5,8a5,8e5,8p,8d5,8p,8f#5,8p,8f#5,8p,8f#5,8e5,8e5,8f#5,8e5,8f#5,8f#5,8f#5,8d5,8p,8b,8p,8e5,8p,8e5,8p,8e5,8g#5,8g#5,8a5,8b5,8a5,8a5,8a5,8e5,8p,8d5,8p,8f#5,8p,8f#5,8p,8f#5,8e5,8e5'
    #'Entertainer:d=4,o=5,b=140:8d,8d#,8e,c6,8e,c6,8e,2c.6,8c6,8d6,8d#6,8e6,8c6,8d6,e6,8b,d6,2c6,p,8d,8d#,8e,c6,8e,c6,8e,2c.6,8p,8a,8g,8f#,8a,8c6,e6,8d6,8c6,8a,2d6'
    #'Muppets:d=4,o=5,b=250:c6,c6,a,b,8a,b,g,p,c6,c6,a,8b,8a,8p,g.,p,e,e,g,f,8e,f,8c6,8c,8d,e,8e,8e,8p,8e,g,2p,c6,c6,a,b,8a,b,g,p,c6,c6,a,8b,a,g.,p,e,e,g,f,8e,f,8c6,8c,8d,e,8e,d,8d,c'
    #'Xfiles:d=4,o=5,b=125:e,b,a,b,d6,2b.,1p,e,b,a,b,e6,2b.,1p,g6,f#6,e6,d6,e6,2b.,1p,g6,f#6,e6,d6,f#6,2b.,1p,e,b,a,b,d6,2b.,1p,e,b,a,b,e6,2b.,1p,e6,2b.'
    #'Looney:d=4,o=5,b=140:32p,c6,8f6,8e6,8d6,8c6,a.,8c6,8f6,8e6,8d6,8d#6,e.6,8e6,8e6,8c6,8d6,8c6,8e6,8c6,8d6,8a,8c6,8g,8a#,8a,8f'
    #'20thCenFox:d=16,o=5,b=140:b,8p,b,b,2b,p,c6,32p,b,32p,c6,32p,b,32p,c6,32p,b,8p,b,b,b,32p,b,32p,b,32p,b,32p,b,32p,b,32p,b,32p,g#,32p,a,32p,b,8p,b,b,2b,4p,8e,8g#,8b,1c#6,8f#,8a,8c#6,1e6,8a,8c#6,8e6,1e6,8b,8g#,8a,2b'
    #'Bond:d=4,o=5,b=80:32p,16c#6,32d#6,32d#6,16d#6,8d#6,16c#6,16c#6,16c#6,16c#6,32e6,32e6,16e6,8e6,16d#6,16d#6,16d#6,16c#6,32d#6,32d#6,16d#6,8d#6,16c#6,16c#6,16c#6,16c#6,32e6,32e6,16e6,8e6,16d#6,16d6,16c#6,16c#7,c.7,16g#6,16f#6,g#.6'
    #'MASH:d=8,o=5,b=140:4a,4g,f#,g,p,f#,p,g,p,f#,p,2e.,p,f#,e,4f#,e,f#,p,e,p,4d.,p,f#,4e,d,e,p,d,p,e,p,d,p,2c#.,p,d,c#,4d,c#,d,p,e,p,4f#,p,a,p,4b,a,b,p,a,p,b,p,2a.,4p,a,b,a,4b,a,b,p,2a.,a,4f#,a,b,p,d6,p,4e.6,d6,b,p,a,p,2b'
    #'StarWars:d=4,o=5,b=45:32p,32f#,32f#,32f#,8b.,8f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32e6,8c#.6,32f#,32f#,32f#,8b.,8f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32e6,8c#6'
    #'GoodBad:d=4,o=5,b=56:32p,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,d#,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,c#6,32a#,32d#6,32a#,32d#6,8a#.,16f#.,32f.,32d#.,c#,32a#,32d#6,32a#,32d#6,8a#.,16g#.,d#'
    #'TopGun:d=4,o=4,b=31:32p,16c#,16g#,16g#,32f#,32f,32f#,32f,16d#,16d#,32c#,32d#,16f,32d#,32f,16f#,32f,32c#,16f,d#,16c#,16g#,16g#,32f#,32f,32f#,32f,16d#,16d#,32c#,32d#,16f,32d#,32f,16f#,32f,32c#,g#'
    #'A-Team:d=8,o=5,b=125:4d#6,a#,2d#6,16p,g#,4a#,4d#.,p,16g,16a#,d#6,a#,f6,2d#6,16p,c#.6,16c6,16a#,g#.,2a#'
    #'Flinstones:d=4,o=5,b=40:32p,16f6,16a#,16a#6,32g6,16f6,16a#.,16f6,32d#6,32d6,32d6,32d#6,32f6,16a#,16c6,d6,16f6,16a#.,16a#6,32g6,16f6,16a#.,32f6,32f6,32d#6,32d6,32d6,32d#6,32f6,16a#,16c6,a#,16a6,16d.6,16a#6,32a6,32a6,32g6,32f#6,32a6,8g6,16g6,16c.6,32a6,32a6,32g6,32g6,32f6,32e6,32g6,8f6,16f6,16a#.,16a#6,32g6,16f6,16a#.,16f6,32d#6,32d6,32d6,32d#6,32f6,16a#,16c.6,32d6,32d#6,32f6,16a#,16c.6,32d6,32d#6,32f6,16a#6,16c7,8a#.6'
    #'Jeopardy:d=4,o=6,b=125:c,f,c,f5,c,f,2c,c,f,c,f,a.,8g,8f,8e,8d,8c#,c,f,c,f5,c,f,2c,f.,8d,c,a#5,a5,g5,f5,p,d#,g#,d#,g#5,d#,g#,2d#,d#,g#,d#,g#,c.7,8a#,8g#,8g,8f,8e,d#,g#,d#,g#5,d#,g#,2d#,g#.,8f,d#,c#,c,p,a#5,p,g#.5,d#,g#'
    #'Gadget:d=16,o=5,b=50:32d#,32f,32f#,32g#,a#,f#,a,f,g#,f#,32d#,32f,32f#,32g#,a#,d#6,4d6,32d#,32f,32f#,32g#,a#,f#,a,f,g#,f#,8d#'
    #'Smurfs:d=32,o=5,b=200:4c#6,16p,4f#6,p,16c#6,p,8d#6,p,8b,p,4g#,16p,4c#6,p,16a#,p,8f#,p,8a#,p,4g#,4p,g#,p,a#,p,b,p,c6,p,4c#6,16p,4f#6,p,16c#6,p,8d#6,p,8b,p,4g#,16p,4c#6,p,16a#,p,8b,p,8f,p,4f#'
    #'MahnaMahna:d=16,o=6,b=125:c#,c.,b5,8a#.5,8f.,4g#,a#,g.,4d#,8p,c#,c.,b5,8a#.5,8f.,g#.,8a#.,4g,8p,c#,c.,b5,8a#.5,8f.,4g#,f,g.,8d#.,f,g.,8d#.,f,8g,8d#.,f,8g,d#,8c,a#5,8d#.,8d#.,4d#,8d#.'
    #'LeisureSuit:d=16,o=6,b=56:f.5,f#.5,g.5,g#5,32a#5,f5,g#.5,a#.5,32f5,g#5,32a#5,g#5,8c#.,a#5,32c#,a5,a#.5,c#.,32a5,a#5,32c#,d#,8e,c#.,f.,f.,f.,f.,f,32e,d#,8d,a#.5,e,32f,e,32f,c#,d#.,c#'
    #'MissionImp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d'
    #'smbdeath:d=4,o=5,b=90:32c6,32c6,32c6,8p,16b,16f6,16p,16f6,16f.6,16e.6,16d6,16c6,16p,16e,16p,16c'
    #'Monty P:d=4,o=5,b=200:f6,8e6,d6,8c#6,c6,8b,a#,8a,8g,8a,8a#,a,8g,2c6,8p,8c6,8a,8p,8a,8a,8g#,8a,8f6,8p,8c6,8c6,8p,8a,8a#,8p,8a#,8a#,8p,8c6,2d6,8p,8a#,8g,8p,8g,8g,8f#,8g,8e6,8p,8d6,8d6,8p,8a#,8a,8p,8a,8a,8p,8a#,2c6,8p,8c6'
    #'Yaketysax:d=4,o=5,b=125:8d.,16e,8g,8g,16e,16d,16a4,16b4,16d,16b4,8e,16d,16b4,16a4,16b4,8a4,16a4,16a#4,16b4,16d,16e,16d,g,p,16d,16e,16d,8g,8g,16e,16d,16a4,16b4,16d,16b4,8e,16d,16b4,16a4,16b4,8d,16d,16d,16f#,16a,8f,d,p,16d,16e,16d,8g,16g,16g,8g,16g,16g,8g,8g,16e,8e.,8c,8c,8c,8c,16e,16g,16a,16g,16a#,8g,16a,16b,16a#,16b,16a,16b,8d6,16a,16b,16d6,8b,8g,8d,16e6,16b,16b,16d,8a,8g,g'
    #'YMCA:d=4,o=5,b=160:8c#6,8a#,2p,8a#,8g#,8f#,8g#,8a#,c#6,8a#,c#6,8d#6,8a#,2p,8a#,8g#,8f#,8g#,8a#,c#6,8a#,c#6,8d#6,8b,2p,8b,8a#,8g#,8a#,8b,d#6,8f#6,d#6,f.6,d#.6,c#.6,b.,a#,g#'
    #'BarbieGirl:d=4,o=5,b=125:8g#,8e,8g#,8c#6,a,p,8f#,8d#,8f#,8b,g#,8f#,8e,p,8e,8c#,f#,c#,p,8f#,8e,g#,f#'
    #'TakeOnMe:d=4,o=4,b=160:8f#5,8f#5,8f#5,8d5,8p,8b,8p,8e5,8p,8e5,8p,8e5,8g#5,8g#5,8a5,8b5,8a5,8a5,8a5,8e5,8p,8d5,8p,8f#5,8p,8f#5,8p,8f#5,8e5,8e5,8f#5,8e5,8f#5,8f#5,8f#5,8d5,8p,8b,8p,8e5,8p,8e5,8p,8e5,8g#5,8g#5,8a5,8b5,8a5,8a5,8a5,8e5,8p,8d5,8p,8f#5,8p,8f#5,8p,8f#5,8e5,8e5'
    #'two_short:d=4,o=5,b=100:16e6,16e6'
    #'long:d=1,o=5,b=100:e6'
    #'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
    #'scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b'


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: info


# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_api_key

ota:
  password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Poolcontroller Fallback Hotspot"
    password: !secret esphome_ap_fallback_password

captive_portal:

output:
  - platform: ledc
    pin: GPIO12
    id: rtttl_out

rtttl:
  output: rtttl_out


status_led:
  pin:
    number: GPIO4
    inverted: true

#Messungen/Status
#Bei jedem Zyklus werden die Logikfunktionen getriggert und entsprechend Flags (globale Variablen) gesetzt. Zudem wird der Status in der Logausgabe angezeigt
interval:
  - interval: 5s
    then:
      if: 
        condition:
          - time.has_time:
        then:
          - script.execute: check_PumpPreRunTime
          - script.execute: check_chlor_needed
          - script.execute: check_ph_needed
          - script.execute: status
          - lambda: |
              id(ph_max_setter).publish_state(id(max_ph_ml_per_day));
              id(ph_cycle_setter).publish_state(id(max_ph_ml_per_cycle));
              id(ph_ml_s_setter).publish_state(id(ph_ml_per_second));
              id(ch_d_max_setter).publish_state(id(chlorinator_run_time_max));
              id(pump_prerun_time_setter).publish_state(id(PumpPreRunTime));
              
      


#id(ph_manipulator).publish_state(id(ph_today_ml));
#PH-Minus
#Bei jedem Zyklus wird das ph_locked flag zurückgesetzt um eine erneute PH Dosierung zu ermöglichen und die PH Dosierung gestartet
  - interval: ${checkIntervalPH}
    then:
      if: 
        condition:
          - time.has_time:
        then:
          - lambda: |
              if (id(ph_locked)){
                id(ph_cycles)++;
              }
              id(ph_locked) =  false;
          - if:
              condition:
                - lambda: return id(poolpump_ok) && id(ph_needed) && !id(ph_max_reached);  
              then:
              - switch.turn_on: phDosierpumpe
              - logger.log: 
                  format: "PH Dosierung über Zeitintervall angefragt."
                  level: info



#ORP (Chlorinator)
#Bei jedem Zyklus werden die Flags geprüft und nach bedarf der Chlorinator eingeschaltet
  - interval: ${checkIntervalORP}
    then:
      if: 
        condition:
          - time.has_time:
        then:
          - if:
              condition:
                - lambda: return id(poolpump_ok) && id(chlor_needed) && !id(chlorinator_max_reached);    
              then:
              - switch.turn_on: chlorinator
              - logger.log: 
                  format: "Chlorinator über Zeitintervall angefragt."
                  level: info
              else:
              - switch.turn_off: chlorinator
              - logger.log: 
                  format: "Chlorinator über Zeitintervall anbgestellt."
                  level: info



time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Berlin
    on_time:
      #Poolpumpe zu bestimmter Uhrzeit einschalten
      - seconds: 0
        minutes: ${PumpStartTimeMinute}
        hours: ${PumpStartTimeHour}
        then:
          - logger.log: 
              format: "Poolpumpe Tageszyklus gestartet"
              level: info
          - switch.turn_on: poolpumpe
          - switch.turn_on: filterspeed

      #Poolpumpe zu bestimmter Uhrzeit ausschalten
      - seconds: 0
        minutes: ${PumpEndTimeMinute}
        hours: ${PumpEndTimeHour}
        then:
         - logger.log: 
            format: "Poolpumpe Tageszyklus beendet"
            level: info
         - switch.turn_off: poolpumpe
      # Tägliche maximale Begrenzungen zurücksetzen
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - logger.log: 
              format: "Zähler für maximale tägliche Mengen zurückgesetzt."
              level: info
          - lambda: |
              id(can_ph_rest) = id(can_ph_rest) - id(ph_today_ml);
              id(ph_today_ml) = 0.0;
              id(chlorinator_today_run_time) = 0.0;
              id(ph_cycles) = 1.0;
              id(phdispenser_today_run_time) = 0.0;
              id(ph_max_reached) = false;
              id(chlorinator_max_reached) =  false;
              
                                    

text_sensor:
- platform: template
  name: "PH_Minus heute"
  lambda: |
     return { to_string(id(ph_today_ml))};
  update_interval: 10s 

- platform: template
  name: "Chlorinator Laufzeit"
  lambda: |
     return { to_string(id(chlorinator_today_run_time)/60)};
  update_interval: 10s 


uart:
 # rx_pin: GPIO14
 # tx_pin: GPIO13
  rx_pin: GPIO19
  tx_pin: GPIO23
  baud_rate: 115200

tuya:
  id: "w2839"


sensor:
  - platform: "tuya"
    name: "Temperatur aktuell gemessen"
    sensor_datapoint: 8
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: "tuya"
    name: "PH aktuell gemessen"
    id: ph_measvalue
    sensor_datapoint: 106
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  
  - platform: "tuya"
    name: "PH_max"
    id: "ph_max"
    sensor_datapoint: 107
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  
  - platform: "tuya"
    name: "PH_min"
    sensor_datapoint: 108
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
  
  - platform: "tuya"
    name: "ORP aktuell gemessen"
    id: "orp_measvalue"
    sensor_datapoint: 131
    state_class: "measurement"

  - platform: "tuya"
    name: "ORP_max"
    id: "orp_max"
    sensor_datapoint: 132
    state_class: "measurement"

  - platform: "tuya"
    name: "ORP_min"
    id: "orp_min"
    sensor_datapoint: 133
    state_class: "measurement"



number:
  - platform: tuya
    name: "ORP Min"
    number_datapoint: 133
    min_value: -2000
    max_value: 2000
    step: 1

  - platform: tuya
    name: "ORP Max"
    number_datapoint: 132
    min_value: -2000
    max_value: 2000
    step: 1

  - platform: tuya
    name: "PH Min"
    number_datapoint: 108
    min_value: 0
    max_value: 1000
    step: 0.1
    multiply: 100

  - platform: tuya
    name: "PH Max"
    number_datapoint: 107
    min_value: 0
    max_value: 1000
    step: 0.1
    multiply: 100

 # - platform: template             # zum debuggen nützlich
 #   name: "PH heute manipulator"
 #   id: "ph_manipulator"
 #   optimistic: false
 #   min_value: 0
 #   max_value: 1000
 #   step: 1
 #   set_action: 
 #       lambda: |
 #        id(phdispenser_today_run_time)= x / id(ph_ml_per_second);

  - platform: template
    name: "PH max Tag (ml)"
    id: "ph_max_setter"
    optimistic: false
    min_value: 0
    max_value: 1000
    step: 1
    set_action: 
        lambda: |
         id(max_ph_ml_per_day)= x;

  - platform: template
    name: "PH max Zyklus (ml)"
    id: "ph_cycle_setter"
    optimistic: false
    min_value: 0
    max_value: 1000
    step: 1
    set_action: 
        lambda: |
         id(max_ph_ml_per_cycle)= x;

  - platform: template
    name: "PH p. Sekunde (ml)"
    id: "ph_ml_s_setter"
    optimistic: false
    min_value: 0
    max_value: 1000
    step: 0.01
    set_action: 
        lambda: |
         id(ph_ml_per_second)= x;
         
  - platform: template
    name: "Chlorinator tägl. max (min)"
    id: "ch_d_max_setter"
    optimistic: false
    min_value: 0
    max_value: 1000
    step: 1
    set_action: 
        lambda: |
         id(chlorinator_run_time_max)= x;

  - platform: template
    name: "Poolpumpe Vorlaufzeit (min)"
    id: "pump_prerun_time_setter"
    optimistic: false
    min_value: 0
    max_value: 1000
    step: 1
    set_action: 
        lambda: |
         id(PumpPreRunTime)= x;


switch:
  - platform: gpio
    name: "1_Poolpumpe"
    pin: 25
    id: poolpumpe
    on_turn_on:
      then:
        - switch.turn_on: filterspeed
        - logger.log: 
            format: "Poolpumpe wurde eingeschaltet (Geschwindigkeit Filtern)"
            level: info
    on_turn_off:
      then:
        - switch.turn_off: phDosierpumpe
        - switch.turn_off: chlorinator
        - logger.log:
            format: "Poolpumpe wurde ausgeschaltet"
            level: info


  - platform: gpio
    name: "2_Chlorinator"
    pin: 26
    id: chlorinator
    on_turn_on:
      then:
        - logger.log: 
            format: "Chlorinator wurde eingeschaltet"
            level: info
        - script.execute: calc_chlorinator_runtime
        - delay: 100ms
        - if:
            condition:
              lambda: return id(poolpump_ok) && id(chlor_needed) && !id(chlorinator_max_reached);   
            then:
            else:
              - switch.turn_off: chlorinator

    on_turn_off:
      then:
        - logger.log:
            format: "Chlorinator wurde ausgeschaltet"
            level: info


  - platform: gpio
    name: "3_PH Dosierpumpe"
    pin: 33
    id: phDosierpumpe
    on_turn_on:
      then:
        - lambda: |
              if (id(ph_locked)){
                id(ph_cycles)++;
              }
              id(ph_locked) =  false;
        - logger.log: 
            format: "PH Dispenser wurde angefordert"
            level: info      
        - script.execute: calc_ph_ml
        - delay: 100ms  
        - if:
            condition:
              lambda: return id(poolpump_ok) && id(ph_needed) && !id(ph_max_reached);   
            then:
              - logger.log: 
                  format: "PH Dispenser wurde eingeschaltet"
                  level: info

            else:
              - switch.turn_off: phDosierpumpe
    on_turn_off:
      then:
        - logger.log:
            format: "PH Dosierpumpe wurde ausgeschaltet"
            level: info


  - platform: gpio
    name: "4_Wärmepumpe"
    pin: 32
    id: waermepumpe
    on_turn_on:
      then:
        - logger.log: 
            format: "Wärmepumpe wurde eingeschaltet"
            level: info
    on_turn_off:
      then:
        - logger.log:
            format: "Wärmepumpe wurde ausgeschaltet"
            level: info
            
######## Vario + ########
  - platform: gpio
    name: "5_Filtern"
    pin: 13
    id: filterspeed
    interlock: [backwashspeed,cleanerspeed]
  - platform: gpio
    name: "6_Rückspülen"
    pin: 27
    id: backwashspeed
    interlock: [filterspeed,cleanerspeed]
  - platform: gpio
    name: "7_Poolsauger"
    pin: 14
    id: cleanerspeed
    interlock: [backwashspeed,filterspeed]

######## Reset ########
  - platform: factory_reset
    name: 10_Reset

######## Skripte ########
script:
  - id: check_PumpPreRunTime
    mode: single     
    then:
      - if: #Prüfen ob Pumpenvorlaufzeit erreicht
          condition:
            - for:
                time: !lambda return (id(PumpPreRunTime) * 60000);
                condition:
                  switch.is_on: poolpumpe
          then:
            - lambda: |
                  id(poolpump_ok) = true ;
          else:
            - lambda: |
                  id(poolpump_ok) = false ; 

  - id: check_chlor_needed
    mode: single     
    then:
      - if: #Prüfen ob Chlor benötigt wird
          condition:
            - lambda: |-
                if (id(orp_measvalue).state < id(orp_min).state) { 
                  return true;
                } 
                else
                {
                  return false;
                }
          then:
            - lambda: |
                id(chlor_needed) = true ;
          else:
            - lambda: |
                id(chlor_needed) = false ; 

  - id: check_ph_needed
    mode: single     
    then:
      - if: #Prüfen ob PH Minus benötigt wird
          condition:
            - lambda: |-
                if (id(ph_measvalue).state > id(ph_max).state) { 
                  return true;
                } 
                else
                {
                  return false;
                }
          then:
            - lambda: |
                id(ph_needed) = true ;
          else:
            - lambda: |
                id(ph_needed) = false ;

  - id: status
    mode: single     
    then:
      - lambda: |
              ESP_LOGI("Status", "Poolpumpenvorlaufzeit status   |  %i |", id(poolpump_ok));
              ESP_LOGI("Status", "Chlor nötig                    |  %i | ORP  Ist: %.2f Min: %.2f", id(chlor_needed), id(orp_measvalue).state, id(orp_min).state );
              ESP_LOGI("Status", "Chlor tägl. max. erreicht      |  %i |", id(chlorinator_max_reached));
              ESP_LOGI("Status", "PH Minus nötig                 |  %i | PH   Ist:   %.2f Max:   %.2f", id(ph_needed), id(ph_measvalue).state, id(ph_max).state );
              ESP_LOGI("Status", "PH Minus tägl. max. erreicht   |  %i |      Ist:   %.2fml Max:   %.2fml", id(ph_max_reached), id(ph_today_ml), id(max_ph_ml_per_day));
              ESP_LOGI("Status", "PH Minus Zyklus max. erreicht  |  %i |", id(ph_locked));
              ESP_LOGI("Status", "Laufzeit Chlorinator %.2f Minuten", id(chlorinator_today_run_time)/60);

  - id: calc_chlorinator_runtime
    mode: single     
    then:
      - while:
            condition:
              switch.is_on: chlorinator
            then:
            - delay: 1s
            - lambda: |
                (id(chlorinator_today_run_time) ++ );
                if ((id(chlorinator_today_run_time) / 60) >= id(chlorinator_run_time_max)) { 
                  id(chlorinator_max_reached) = true;
                  id(chlorinator).publish_state(false);
                } 
                else
                {
                  id(chlorinator_max_reached) =  false;
                } 

  - id: calc_ph_ml
    mode: single     
    then:
      - while:
            condition:
              switch.is_on: phDosierpumpe
            then:
              - lambda: |

                  id(ph_today_ml) = (id(phdispenser_today_run_time) * id(ph_ml_per_second));

                  id(ph_locked) = (id(max_ph_ml_per_cycle)*id(ph_cycles) <= (id(phdispenser_today_run_time) * id(ph_ml_per_second)));

                  id(ph_max_reached) = (id(max_ph_ml_per_day) <= (id(phdispenser_today_run_time) * id(ph_ml_per_second)));

              - if:
                  condition:
                    - lambda: |
                        if ( id(max_ph_ml_per_day) <= id(ph_today_ml) || id(ph_locked) ){ 
                        return true;
                        } 
                        else
                        {
                          return false;
                        } 

                  then:
                   # - lambda: |
                   #     id(ph_manipulator).publish_state(id(ph_today_ml));
                    - delay: 100ms
                    - switch.turn_off: phDosierpumpe

                  else:
                    - delay: 1s
                    - lambda: |                        
                        id(ph_max_reached) =  false;
                        id(phdispenser_today_run_time) ++ ;
                    #id(ph_manipulator).publish_state(id(ph_today_ml));
                      

